// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (
  firebase_uid, email, username, affiliation_id, enrollment_year, graduation_year, is_job_hunt_completed, self_introduction, icon_url, show_profile_in_public_event, show_profile_in_shared_url
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
`

func (q *Queries) CreateUser(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, firebase_uid, email, username, affiliation_id, enrollment_year, graduation_year, is_job_hunt_completed, self_introduction, icon_url, show_profile_in_public_event, show_profile_in_shared_url, created_at, updated_at FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirebaseUid,
		&i.Email,
		&i.Username,
		&i.AffiliationID,
		&i.EnrollmentYear,
		&i.GraduationYear,
		&i.IsJobHuntCompleted,
		&i.SelfIntroduction,
		&i.IconUrl,
		&i.ShowProfileInPublicEvent,
		&i.ShowProfileInSharedUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, firebase_uid, email, username, affiliation_id, enrollment_year, graduation_year, is_job_hunt_completed, self_introduction, icon_url, show_profile_in_public_event, show_profile_in_shared_url, created_at, updated_at FROM user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirebaseUid,
			&i.Email,
			&i.Username,
			&i.AffiliationID,
			&i.EnrollmentYear,
			&i.GraduationYear,
			&i.IsJobHuntCompleted,
			&i.SelfIntroduction,
			&i.IconUrl,
			&i.ShowProfileInPublicEvent,
			&i.ShowProfileInSharedUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
